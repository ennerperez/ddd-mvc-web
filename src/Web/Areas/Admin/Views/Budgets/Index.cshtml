@using Microsoft.Extensions.Configuration
@using System.Globalization
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Budgets";
    var currencyCulture = new CultureInfo(Configuration["CultureInfo:CurrencyCulture"]);
    var currencyRegion = new RegionInfo(Configuration["CultureInfo:CurrencyCulture"]);
}

<partial name="Partials/_LoaderPartial"/>

<div id="content" class="page" style="display: none;">
    <div class="page-title py-1">
        <h3 class="m-0 p-0">
            <i class="fas fa-receipt"></i> @ViewData["Title"]
        </h3>
    </div>
    <div class="page-content m-2">
        <div class="row">
            <div class="col">
                <button type="button" class="btn btn-labeled btn-primary" name="btn-create">
                    <span class="btn-label">
                        <i class="fa fa-plus"></i>
                    </span>Add
                </button>
                <button type="button" class="btn btn-labeled btn-danger" name="btn-export-table-pdf" data-format="pdf">
                    <span class="btn-label">
                        <i class="far fa-file-pdf"></i>
                    </span>PDF
                </button>
                <table id="table" class="table table-sm table-striped table-bordered display nowrap" style="width:100%">
                    <thead>
                    <tr>
                        <th>Code</th>
                        <th>Client</th>
                        <th>Status</th>
                        <th>Total</th>
                        <th data-printable="false" data-exportable="false" data-orderable="false" width="5%"></th>
                    </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>

<partial name="Editor"/>

<partial name="Components/Datatables"/>
<partial name="Components/Sweetalert"/>

@section Scripts
{
    <environment include="development">
        <script src="~/lib/jquery.mask/jquery.mask.js"></script>
        <script src="~/js/editor.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="development">
        <script src="~/lib/jquery.mask/jquery.mask.min.js"></script>
        <script src="~/js/editor.min.js" asp-append-version="true"></script>
    </environment>

    <script>
            let tableMain = null;
            let editorMain = null;
            let apiUrl = '@Url.Content("~/api/budgets")';

			__editor_options.change_status = {
				title: "Confirmation",
				text: "Are you sure you want to change the status?",
				icon: 'question',
				showCancelButton: true,
				confirmButtonText: "Yes",
				cancelButtonText: "No"
			};

			var formatter = new Intl.NumberFormat('@currencyCulture.Name', { style: 'currency', currency: '@currencyRegion.ISOCurrencySymbol' });

            $(document).ready( function () {

                tableMain = $('#table').DataTable({
                    language: { url: __datatable_options.language },
                    serverSide: true,
                    processing: false,
                    paging: true,
                    pageLength: 50,
                    responsive: { details: { renderer: responsiveRenderer }, },
                    info: true,
                    dom: 'lBfrtip',
                    buttons: __datatable_buttons,
                    search: {
                        caseInsensitive: true
                    },
                    ajax: {
                        url: `${apiUrl}/table`,
                        headers: { RequestVerificationToken: __RequestVerificationToken },
                        type: 'POST',
                        contentType: "application/json",
                        data: function (d) {
                            return JSON.stringify(d);
                        }
                    },
                    columns: [
                        { name: "code", data: "code", render: function (data, type, row)
							 {
								 return `${data}<br /><small>${dateTimeRender(row["createdAt"])}</small>`;
							 }
						},
                        { name: "client", data: null, render: function (data, type, row)
                        	{
								return `<span class="position-relative">${data.clientFullName}<br /><small>${data.clientIdentification}</small></span>`;
                        	}
						},
                        { name: "status", data: "status", render: function (data, type, row)
							{
								let values = [
									{'info': {'-10':'Draft','10':'Created'}},
									{'warning': {'0':'Unknown'}},
									{'success': {'20':'Approved'}},
									{'danger': {'30':'Rejected'}}
								];
								return statusBadgeRender(data, values);
							}
						},
						{ name: "total", data: null, render: function (data, type, row)
							{
								return `<span class="position-relative"><small>Subtotal: ${formatter.format(data.subtotal)}<br />Taxes: ${formatter.format(data.taxes)}<br /><b>Total: ${formatter.format(data.total)}</b></small></span>`;
							}
						},
                        { className: "text-center", data: null, render: function (data, type, row)
                            {
								let status = data.status;
                                return `<div class="dropdown">
                                            <button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" title="Actions">
                                                <i class="fas fa-bolt"></i>
                                            </button>
                                            <div class="dropdown-menu dropdown-menu-end">
												<button type="button" class="dropdown-item" data-format="pdf" name="btn-export-pdf">Export as PDF</button>
												<hr class="dropdown-divider">
												${status === -10 ? '<button type="button" class="dropdown-item" name="btn-send">Send</button>' : ""}
												${status === 10 ? '<button type="button" class="dropdown-item text-success" name="btn-approve">Approve</button>' : ""}
												${status === 10 ? '<button type="button" class="dropdown-item text-danger" name="btn-reject">Reject</button>' : ""}
												${status !== 20 && status !== 30 ? '<hr class="dropdown-divider">':""}
                                                <button type="button" class="dropdown-item" name="btn-edit">Edit</button>
                                                <button type="button" class="dropdown-item text-danger" name="btn-delete">Delete</button>
                                            </div>
                                        </div>`;
                            }
                        }

                    ],
                    lengthMenu: __datatable_options.lengthMenu,
                    initComplete: function () {

						$("[name='btn-export-table-pdf']").appendTo($('.dt-buttons'));
						$("[name='btn-create']").appendTo($('.dt-buttons'));

                        tableMain.on('draw', reHandle);
						tableMain.on('draw', reHandleExtended);

                        reHandle();
						reHandleExtended();

                        // Search Delay
                        doSearchDelay(tableMain);

                        // UI Fix
                        UIFix(tableMain);

                        hideLoader();

                    }
                });
                editorMain = new bootstrap.Modal(document.getElementById('modal-editor'));
                setEditor(tableMain, editorMain, apiUrl);
            });

			function reHandleExtended() {
            	$("[name='btn-send']").each(function () {
            		$(this).off("click", sendRecord).on("click", sendRecord);
            	});
            	$("[name='btn-approve']").each(function () {
            		$(this).off("click", approveRecord).on("click", approveRecord);
            	});
            	$("[name='btn-reject']").each(function () {
            		$(this).off("click", rejectRecord).on("click", rejectRecord);
            	});
				$("[name='btn-export-pdf']").each(function () {
					$(this).off("click", exportRecord).on("click", exportRecord);
				});
				$("[name='btn-export-table-pdf']").each(function () {
					$(this).off("click", exportRecord).on("click", exportRecord);
				});
            }

			function sendRecord(){
				let btn = $(this);
				let row = btn.closest("tr");
				let data = __editor_table.rows(row).data()[0];
				let id = data['id'];
				let model = { id: id, status: 10 };
				patchRecord(model,__editor_options.change_status);
			}
			function approveRecord(){
				let btn = $(this);
				let row = btn.closest("tr");
				let data = __editor_table.rows(row).data()[0];
				let id = data['id'];
				let model = { id: id, status: 20 };
				patchRecord(model,__editor_options.change_status);
			}
			function rejectRecord(){
				let btn = $(this);
				let row = btn.closest("tr");
				let data = __editor_table.rows(row).data()[0];
				let id = data['id'];
				let model = { id: id, status: 30 };
				patchRecord(model,__editor_options.change_status);
			}
			function exportRecord(){
				let btn = $(this);
				let row = btn.closest("tr");
				let data = __editor_table.rows(row).data()[0];
				let id = "";
				if (data !== undefined) id = data['id'];
				let format = $(btn).data("format");
				let fileName = $(btn).data("file-name");
				@{
                    var url = Url.Action("Export");
                }
				fetch(`@url/${id}?format=${format}`)
                  .then(resp => resp.blob())
                  .then(blob => {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
					a.target = "_blank";
					if (fileName !== undefined) a.download = fileName;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    Toast.fire(__editor_options.success);
                  })
                  .catch(() => Toast.fire(__editor_options.error));
			}

			function patchRecord(model,question) {
            	swal.fire(question).then((result) => {
            		if (result.value) {
            			let method = 'PATCH';
            			let url = `${__editor_api_url}/${model.id}`;
            			$.ajax({
            				url: url,
            				headers: {RequestVerificationToken: __RequestVerificationToken},
            				contentType: "application/json; charset=utf-8",
            				data: JSON.stringify(model),
            				type: method,
            				success: function () {
            					__editor_table.ajax.reload(reHandle);
            					Toast.fire(__editor_options.success);
            				},
            				error: function (e) {
            					let text = "";
            					if (e.hasOwnProperty("responseJSON")) text = e.responseJSON.detail;
            					__editor_options.error.text = text;
            					Toast.fire(__editor_options.error);
            				}
            			});
            		}
            	});
            }

    </script>
}